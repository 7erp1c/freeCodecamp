/* Обещание в JavaScript - это именно то, как оно звучит: вы используете его, чтобы пообещать сделать что-то,
обычно асинхронно. Когда задача будет выполнена, вы либо выполните свое обещание, либо не сделаете этого.
Promise - это функция-конструктор, поэтому для ее создания необходимо использовать ключевое слово new.
В качестве аргумента она принимает функцию с двумя параметрами - resolve и reject.
Это методы, используемые для определения результата выполнения обещания.
Синтаксис выглядит следующим образом:

const myPromise = new Promise((resolve, reject) => {

});
*/
//Пример:
let makeServerRequest = new Promise((resolve,reject)=>{

});

/* У обещания есть три состояния: ожидание, выполнение и отказ.
Обещание, которое вы создали в последнем задании, навсегда застряло в состоянии ожидания,
потому что вы не добавили способ завершить обещание. Для этого используются параметры resolve и reject,
передаваемые в аргументе promise. resolve используется, когда вы хотите, чтобы обещание было выполнено,
а reject - когда вы хотите, чтобы оно не было выполнено.
Это методы, принимающие аргумент, как показано ниже.

const myPromise = new Promise((resolve, reject) => {
  if(condition here) {
    resolve("Promise was fulfilled");
  } else {
    reject("Promise was rejected");
  }
});

В приведенном выше примере в качестве аргумента этих функций используются строки, но на самом деле это может
быть что угодно.
Часто это может быть объект, данные из которого вы используете для размещения на своем сайте или в другом месте.
*/
// Пример:
const makeServerRequest = new Promise((resolve, reject) => {
    // responseFromServer представляет собой ответ от сервера
    let responseFromServer;

    if(responseFromServer) {
        resolve('We got the data');
    } else {
        reject('Data not received');
    }
});
